%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "ast.h"

int yylex(void);
void yyerror(const char *s);

// Global program storage
Program prog = { .model_count = 0 };

// Forward declaration
void generate_python();

%}

%union {
    int intVal;
    float floatVal;
    char *strVal;
}

%token MODEL LBRACE RBRACE ASSIGN
%token <intVal> INT
%token <floatVal> FLOAT
%token <strVal> ID STRING

%type <strVal> value
%type <strVal> param
%type <strVal> param_list
%type <strVal> model_def

%%

program:
    model_def
    {
        printf("\nâœ… Parsing completed successfully!\n");
        generate_python();
    }
    ;

model_def:
    MODEL ID {
        /* Create the model record early so `param` actions can
           append parameters while `param_list` is being parsed. */
        Model *m = &prog.models[prog.model_count++];
        m->name = strdup($2);
        m->param_count = 0;
    } LBRACE param_list RBRACE
    ;

param_list:
      /* empty */         { }
    | param_list param    { }
    ;

param:
    ID ASSIGN value
    {
        Model *m = &prog.models[prog.model_count-1];
        Param *p = &m->params[m->param_count++];
        p->name = strdup($1);
        p->value = strdup($3);
    }
    ;

value:
      INT    { 
          char buf[32]; 
          sprintf(buf, "%d", $1);
          $$ = strdup(buf);
      }
    | FLOAT  { 
          char buf[32]; 
          sprintf(buf, "%f", $1);
          $$ = strdup(buf);
      }
    | STRING { 
          $$ = strdup($1); 
      }
    ;

%%

// Error function
void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

// ---------------------
// Code Generation
// ---------------------
void generate_python() {
    FILE *fp = fopen("train.py", "w");
    if (!fp) { perror("train.py"); exit(1); }

    fprintf(fp, "# Generated by MLC Compiler\n");
    fprintf(fp, "import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\n");

    for (int i=0; i<prog.model_count; i++) {
        Model *m = &prog.models[i];

        fprintf(fp, "# Model: %s\n", m->name);

        // Write parameters with defaults if missing
        int has_epochs=0, has_lr=0;
        for (int j=0; j<m->param_count; j++) {
            Param *p = &m->params[j];
            fprintf(fp, "%s = %s\n", p->name, p->value);
            if (strcmp(p->name,"epochs")==0) has_epochs=1;
            if (strcmp(p->name,"learning_rate")==0) has_lr=1;
        }
        if (!has_epochs) fprintf(fp, "epochs = 10\n");
        if (!has_lr) fprintf(fp, "learning_rate = 0.01\n");

        // Only support LinearRegression (single-layer NN) for now
        if (strcmp(m->name,"LinearRegression")==0) {
            fprintf(fp, "\n# Dummy dataset\n");
            fprintf(fp, "X = torch.randn(100,1)\n");
            fprintf(fp, "y = 3*X + 2 + 0.1*torch.randn(100,1)\n\n");

            fprintf(fp, "# Model\n");
            fprintf(fp, "model = nn.Linear(1,1)\n\n");

            fprintf(fp, "# Loss and optimizer\n");
            fprintf(fp, "criterion = nn.MSELoss()\n");
            fprintf(fp, "optimizer = optim.SGD(model.parameters(), lr=learning_rate)\n\n");

            fprintf(fp, "# Training loop\n");
            fprintf(fp, "for epoch in range(epochs):\n");
            fprintf(fp, "    optimizer.zero_grad()\n");
            fprintf(fp, "    outputs = model(X)\n");
            fprintf(fp, "    loss = criterion(outputs, y)\n");
            fprintf(fp, "    loss.backward()\n");
            fprintf(fp, "    optimizer.step()\n");
            fprintf(fp, "    if epoch %% 10 == 0: print(f'Epoch {epoch}, Loss: {loss.item():.4f}')\n\n");

            fprintf(fp, "print('Training completed.')\n\n");
        } else {
            fprintf(fp, "print(f'Model %s not yet supported')\n\n", m->name);
        }
    }

    fclose(fp);
    printf("âœ… Python PyTorch script 'train.py' generated successfully!\n");

    // -----------------------
    // VENV Setup
    // -----------------------
    printf("ðŸ”§ Setting up virtual environment...\n");

    // Step 1: detect python version
    int ret = system("PYTHON=$(which python3) && echo Using $PYTHON");
    if (ret != 0) {
        fprintf(stderr, "Error detecting Python.\n");
        return;
    }

    // Step 2: create venv folder
    ret = system("python3 -m venv mlc_venv");
    if (ret != 0) {
        fprintf(stderr, "Error creating virtual environment.\n");
        return;
    }

    // Step 3: install required packages
    ret = system("mlc_venv/bin/python -m pip install --upgrade pip && mlc_venv/bin/python -m pip install torch");
    if (ret != 0) {
        fprintf(stderr, "Error installing packages.\n");
        return;
    }

    printf("âœ… Virtual environment 'mlc_venv' ready with required packages.\n");
    printf("Run training using: mlc_venv/bin/python train.py\n");
}
