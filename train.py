# Generated by MLC Compiler
import torch
import torch.nn as nn
import torch.optim as optim

# Model: LinearRegression
epochs = 50
learning_rate = 0.010000

# Dummy dataset
X = torch.randn(100,1)
y = 3*X + 2 + 0.1*torch.randn(100,1)

# Model
model = nn.Linear(1,1)

# Loss and optimizer
criterion = nn.MSELoss()
optimizer = optim.SGD(model.parameters(), lr=learning_rate)

# Training loop
for epoch in range(epochs):
    optimizer.zero_grad()
    outputs = model(X)
    loss = criterion(outputs, y)
    loss.backward()
    optimizer.step()
    if epoch % 10 == 0: print(f'Epoch {epoch}, Loss: {loss.item():.4f}')

print('Training completed.')

